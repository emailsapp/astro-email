---
import fs from "node:fs";
import path from "node:path";

let failed = false;

async function findTemplates(
	basePath: string,
	relativePath: string = "",
	currentDepth: number = 0,
	maxDepth: number = 2,
): Promise<any[]> {
	if (currentDepth > maxDepth) {
		return [];
	}

	const fullPath = path.resolve(basePath, relativePath);
	const items = fs.readdirSync(fullPath);
	const results: any[] = [];

	for (const item of items) {
		const itemPath = path.resolve(fullPath, item);
		const stat = fs.statSync(itemPath);

		try {
			if (stat.isDirectory()) {
				const subResults = await findTemplates(
					basePath,
					path.join(relativePath, item),
					currentDepth + 1,
					maxDepth,
				);
				results.push(...subResults);
			} else {
				const astroPageRaw = await import(`${itemPath}?raw`);
				const frontMatterMatch = astroPageRaw.default?.match(
					/^---\s*([\s\S]*?)\s*---/,
				);

				// Extract only export statements from frontmatter
				let exportStatements = "";
				if (frontMatterMatch) {
					const frontMatter = frontMatterMatch[1];
					const exportMatches = frontMatter.match(
						/export\s+[\s\S]*?(?=export\s+|$)/g,
					);
					if (exportMatches) {
						exportStatements = exportMatches.join("\n");
					}
				}

				const frontMatterToProcess = exportStatements || "";

				let exprts = {};

				// TODO: This limits us to not use relative file imports. Why cant we import astro file here at build time.
				if (frontMatterMatch) {
					const frontMatterModule = await import(
						`data:text/javascript,${encodeURIComponent(frontMatterToProcess)}`
					);
					exprts = frontMatterModule;
				}

				const templateName = (
					relativePath ? path.join(relativePath, item) : item
				).replace(".astro", "");

				// Check if getStaticPaths exists and generate multiple pages if so
				if (
					exprts.getStaticPaths &&
					typeof exprts.getStaticPaths === "function"
				) {
					const staticPaths = await exprts.getStaticPaths();

					for (const pathData of staticPaths) {
						let pageName = templateName;
						for (const key in pathData.params) {
							pageName = pageName.replace(`[${key}]`, pathData.params[key]);
						}

						results.push({
							name: pageName,
							config: exprts.config,
							params: pathData.params,
						});
					}
				} else {
					results.push({
						name: templateName,
						config: exprts.config,
					});
				}
			}
		} catch (err) {
			console.error(err);
			failed = true;
		}
	}

	return results;
}

const templates = await findTemplates("src/pages", "", 0, 2);

if (failed) {
	throw new Error("Failed to build pages");
}

const LinkIcon = `
  <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="1em" height="1em" style="margin-bottom:-2px;" viewBox="0 0 15 15">
    <defs>
      <clipPath id="clip-path">
        <rect id="Rectangle_1687" data-name="Rectangle 1687" width="15" height="15" transform="translate(11726 152)" fill="none"/>
      </clipPath>
    </defs>
    <g id="Mask_Group_3" data-name="Mask Group 3" transform="translate(-11726 -152)" clip-path="url(#clip-path)">
      <g id="Group_422" data-name="Group 422" fill="currentColor">
        <path id="Path_4182" data-name="Path 4182" d="M14.6,14H7.4A2.4,2.4,0,0,1,5,11.6V4.4A2.4,2.4,0,0,1,7.4,2h2.8V3.2H7.4A1.2,1.2,0,0,0,6.2,4.4v7.2a1.2,1.2,0,0,0,1.2,1.2h7.2a1.2,1.2,0,0,0,1.2-1.2V9H17v2.6A2.4,2.4,0,0,1,14.6,14Z" transform="translate(11722 152)"/>
        <path id="Path_4181" data-name="Path 4181" d="M3.385,9.591V1.927L.963,4.349a.564.564,0,0,1-.8-.8L3.54.176a.564.564,0,0,1,.684-.1h0l.01.006,0,0,.007,0,.006,0,0,0L4.264.1h0a.567.567,0,0,1,.083.069L7.733,3.55a.564.564,0,0,1-.8.8L4.513,1.926V9.591a.564.564,0,1,1-1.128,0Z" transform="translate(11737.298 150.117) rotate(45)"/>
      </g>
    </g>
  </svg>
`;
---

<html>
  <head>
    <title>Astro Email</title>

    <Fragment
      set:html={`
        <script id="data" type="application/json">${JSON.stringify(
          {
            pages: templates,
          },
          null,
          "  "
        )}</script>
      `}
    />
  </head>

  <body>
    <div class="layout">
      <div class="sidebar">
        <h1>Templates</h1>
        {
          templates.map((template) => {
            const path = template?.name.replace(".astro", "");
            return (
              <div class="button">
                <a href={`#${path}`}>
                  <span>{path}</span>
                </a>
                <a target="_blank" href={path} class="template-link">
                  <span set:html={LinkIcon} />
                </a>
              </div>
            );
          })
        }
      </div>

      <div class="preview">
        <div id="display-width" class="preview-header"></div>
        <iframe width="640px"></iframe>

        <script>
          const dataString = document.querySelector("#data")?.innerHTML;
          if (!dataString) throw new Error("No data found");

          const data = JSON.parse(dataString);
          console.debug("data", data);

          const iframe = document.querySelector("iframe");
          if (!iframe) throw new Error("No iframe found");

          let fixedWidth = undefined;
          let fixedHeight = undefined;

          const updateFormat = (name?: string) => {
            const config = data.pages.find((temp: { name: string }) => {
              return temp.name === `${name}`;
            })?.config;

            fixedWidth = config.width;
            fixedHeight = config.height;
            const width = fixedWidth || iframe?.offsetWidth || 0;
            const height = fixedHeight || iframe?.offsetHeight || 0;

            const display = document.querySelector("#display-width");
            if(display) {
              display.innerHTML = `${width}px x ${height}px`;
            }

            if(iframe) {
              iframe.width = `${width}`;
              iframe.height = `${height}`;
            }
          }

          let resizeListener: EventListener;

          function showTemplate(name: string) {
            if(!iframe) return;

            const config = data.pages.find((temp: { name: string }) => {
              return temp.name === `${name}`;
            })?.config;

            console.debug(name, config)

            updateFormat(name);

            iframe.src = `/${name}`;

            window.removeEventListener("resize", resizeListener);

            resizeListener = () => updateFormat(name);

            window.addEventListener("resize", resizeListener);
          }

          const template = location.hash.substring(1);
          if (template) {
            showTemplate(template)
          } else {
            const first = data.pages[0]?.name.replace(".astro", "");
            showTemplate(first)
          }

          window.addEventListener("hashchange", () => {
            showTemplate(location.hash.substring(1));
          });
        </script>
      </div>
    </div>

    <style>
      body {
        font-family: sans-serif, Arial;
        height: 100vh;
        margin: 0;
        overscroll-behavior: none;
        overflow: hidden;
        font-size: 1rem;
      }

      body {
        background-color: #e5e5f7;
        background-image: linear-gradient(#eee 1px, transparent 1px), linear-gradient(to right, #eee 1px, #fff 1px);
        background-size: 20px 20px;
      }

      @media (prefers-color-scheme: dark) {
        body {
          background-color: hsl(258, 7%, 10%);
          color: #fff;
        }
      }

      iframe {
        border: none;
        max-height: 100%;
        max-width: 100%;
        flex: none;
      }

      h1 {
        opacity: 0.65;
        font-size: 0.65rem;
        font-weight: normal;
        text-transform: uppercase;
        margin: 0 0 1rem 0;
      }

      .preview-header {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 5px 20px;
        font-size: 0.75rem;
        color: #666;
      }

      .preview {
        display: grid;
        grid-template-rows: auto 1fr;
        justify-content: center;
        justify-items: center;
        height: 100%;
        margin: 0 20px;
      }

      .layout {
        height: 100%;
        display: grid;
        grid-template-columns: 250px 1fr;
        grid-template-rows: 1fr;
      }

      .sidebar {
        margin: 8px;
        border-radius: 8px;
        background: #fff;
        padding: 1rem 0.75rem;
        box-sizing: border-box;
        border-right: 1px solid #e0e0e0;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      }

      @media (prefers-color-scheme: dark) {
        .sidebar {
          background-color: hsl(258, 4%, 14%);
          border-right: 1px solid #000000;
        }
      }

      a[href] {
        color: inherit;
        text-decoration: none;
      }

      .button,
      button {
        display: inline-block;
        box-sizing: border-box;
        appearance: none;
        width: 100%;
        background: transparent;
        color: inherit;
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 4px 6px 4px 12px;
        border: 1px solid #ddd;
        border-radius: 8px;
        margin-bottom: 0.5rem;
        transition: all 0.2s;
      }

      .template-link {
        padding: 8px 10px;
        border-radius: 8px;
        transition: all 0.2s;
      }

      .template-link:hover {
        background: #8282823e;
      }

      .button:hover,
      button:hover {
        background: #fff;
        box-shadow: 2px 4px 8px rgba(0, 0, 0, 0.04);
      }

      .button:active,
      button:active {
        transition: none;
        box-shadow: none;
      }

      @media (prefers-color-scheme: dark) {
        button {
          border: 1px solid #4b4b4b;
        }

        button:hover {
          background: #3f3f3f;
        }
      }
    </style>
  </body>
</html>
